import { User } from '../models/user.model.js';
import { mailSender } from '../mailSender.js';
import {OTP} from '../models/OTP.js';
import otpGenerator from 'otp-generator';
import { sendingUserMoney } from '../utils/sendingUserMoney.js';
const generateAccessAndRefreshToken = async (userId) => {
  try {
    const user = await User.findById(userId);
    const accessToken = user.generateAccessToken();
    await user.save({ validateBeforeSave: false });
    return { accessToken };
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: 'Something went wrong while Generating Access Token',
    });
  }
};

const registerUser = async (req, res) => {
  try {
    const {
      firstName,
      lastName,
      email,
      password,
      otp,
      phone
    } = req.body;

    if (
      !firstName ||
      !lastName ||
      !email ||
      !password ||
      !otp ||
      !phone
    ) {
      return res.status(401).json({
        success: false,
        message: 'Please fill all the required fields',
      });
    }

    // if (password !== confirmPassword) {
    //   //both password must be matched
    //   return res.status(400).json({
    //     success: false,
    //     message:
    //       'Password and ConfirmPassword Value does not match, please try again',
    //   });
    // }

    const existedUser = await User.findOne({ email });
    console.log(existedUser);
    console.log("body of user: ", req.body);


    if (existedUser) {
      return res.status(402).json({
        success: false,
        message: 'Username already exists please provide a new email',
      });
    }

    const response = await OTP.find({ email }).sort({ createdAt: -1 }).limit(1);
    console.log("RESPONSE...",response)

    if (response.length === 0) {
      //validate OTP , Lenght 0 so OTP not found
      return res.status(400).json({
        success: false,
        message: 'OTP NOT Foundddddd',
      });
    } else if (otp !== response[0].otp) {
      // if otp entered by user != actual otp then PRINT Invalid OTP;
      return res.status(400).json({
        // here otp is entered by user and response[0].otp is generated by controller;
        success: false,
        message: 'Invalid OTP',
      });
    }
    console.log("REACHED...")
    //created entry in Profile in DB
    // const profileDetails = await Profile.create({
    //   gender: null,
    //   dateOfBirth: null,
    //   about: null,
    //   contactNumer: null,
    // });

    console.log(firstName," ",lastName, " ", email, " ",typeof(phone), " ",password );
    
    var accountNumber = otpGenerator.generate(16, {                       //generate otp of 6 digit number donot contain uppercase,lowercase,specialchar; 
      upperCaseAlphabets:false,
      lowerCaseAlphabets:false,
      specialChars:false,
  });

    const user = await User.create({
      firstName,
      lastName,
      email,
      password,
      phone,
    });
    console.log("REACHED...")
    console.log("REGISTERED USER",user);

    // const cart = await Cart.create({ user });

    // if (!cart) {
    //   return res.status(402).json({
    //     success: false,
    //     message: 'Something went wrong while creating the cart',
    //   });
    // }

    const createdUser = await User.findById(user._id).select('-password');
    console.log(createdUser);

    if (!createdUser) {
      return res.status(402).json({
        success: false,
        message: 'Something went wrong while registering the User',
      });
    }

    // const createdCart = await cart.save();

    return res.status(200).json({
      data: createdUser,
      success: true,
      message: 'Registered Successfully',
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: 'Failed to Register',
    });
  }
};

const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(402).json({
        success: false,
        message: 'Please provide email and password',
      });
    }

    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'EmailId does not exists',
      });
    }

    const isPasswordValid = await user.isPasswordCorrect(password);

    if (!isPasswordValid) {
      return res.status(402).json({
        success: false,
        message: 'Invalid Credentials',
      });
    }

    const { accessToken } = await generateAccessAndRefreshToken(user._id);

    const loggedInUser = await User.findById(user._id).select('-password');

    const options = {
      httpOnly: true,
      secure: true,
    };
    return res.status(200).cookie('accessToken', accessToken, options).json({
      user: loggedInUser,
      success: true,
      message: 'Login Successfull',
      accessToken,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: 'Login Failed',
    });
  }
};

const getUserDetails = async (req, res) => {
  try {
    const existedUser = await User.findById(req.user?._id)
      .select('-password')
      .populate('address');
    if (!existedUser) {
      res.status(404).json({
        success: false,
        message: 'User does not exits with this token',
      });
    }
    return res.status(200).json({
      data: existedUser,
      success: true,
      message: 'User details found',
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: 'Something went wrong while getting user details',
    });
  }
};

//sendOTP
const sendOTP = async (req, res) =>  {

    try { 
        const {email} = req.body;                                     //fetch email from request ki body
        const checkUserPresent = await User.findOne({email});        //check if user already exist

        if(checkUserPresent) {                                      //if user already exist , then return a response
            return res.status(401).json({
                success:false,
                message:'User already registered',
            })
        }

        var otp = otpGenerator.generate(6, {                       //generate otp of 6 digit number donot contain uppercase,lowercase,specialchar; 
            upperCaseAlphabets:false,
            lowerCaseAlphabets:false,
            specialChars:false,
        });
        console.log("OTP generated: ", otp );

        let result = await OTP.findOne({otp: otp});               //check unique otp or not
        while(result){                                            // if result is true so we regenerate otp;
            otp = otpGenerator.generate(6, {
				upperCaseAlphabets: false,
			});
        }

        const otpPayload = {email, otp};

        //create an entry in OTP in DB and this OTP is used in SignUp to find response;
        const otpBody = await OTP.create(otpPayload);
        console.log("OTP Body", otpBody);

        res.status(200).json({                                     //return response successful
            success:true,
            message:'OTP Sent Successfully',
            otp,
        })
    }
    catch(error) {
        console.log(error);
        return res.status(500).json({
            success:false,
            message:error.message,
        })
    }

};

// Controller for Changing Password
const changePassword = async (req, res) => {
  try {
    const userDetails = await User.findById(req.user.id);                         // Get user data from req.user
    const { oldPassword, newPassword, confirmNewPassword } = req.body;            // Get old password, new password, and confirm new password from req.body

    const isPasswordMatch = await bcrypt.compare(oldPassword, userDetails.password );                 // Validate old password
       
    if(!isPasswordMatch) {                                  // If old password does not match, return a 401 (Unauthorized) error
      return res.status(401).json({ success: false, message: "The password is incorrect" });	 
    }

    if(newPassword !== confirmNewPassword) {                             // Match new password and confirm new password
            return res.status(401).json({ success: false, message: "The password and confirm password does not match" });	 
    }
       
    const encryptedPassword = await bcrypt.hash(newPassword, 10);             // Update password
    const updatedUserDetails = await User.findByIdAndUpdate(req.user.id , { password: encryptedPassword } , { new: true });
                                                                                  // find user by id and then update password = encryptedPassword , here if you "const updatedUserDetails =" does not wirte this then also it not affect;
     
    try {                                                          // Send notification email , here passwordUpdated is template of email which is send to user;
      const emailResponse = await mailSender(updatedUserDetails.email, passwordUpdated(updatedUserDetails.email, `Password updated successfully for ${updatedUserDetails.firstName} ${updatedUserDetails.lastName}`));
      console.log("Email sent successfully:", emailResponse.response);
       } 
        catch(error) {
      return res.status(500).json({
        success: false,
        message: "Error occurred while sending email",
        error: error.message,
      });
    }

    return res.status(200).json({ success: true, message: "Password updated successfully" });         // Return success response 	 
   } 
    catch(error) {
    console.error("Error occurred while updating password:", error);
    return res.status(500).json({
      success: false,
      message: "Error occurred while updating password",
      error: error.message,
    });
  }
};

// Controller for Sending Money
const sendMoney = async (req, res) => {
  try {
    const { mobile, accountNumber } = req.body;
    const user = req.user;
    console.log("USER:",user);

    if(!mobile && !accountNumber) {
      return res.status(400).json({
        success: false,
        message: "User not found",
        error: error.message,
      });
    }
    let checkUserPresent = "";
    if(!mobile) {
      checkUserPresent = await User.findOne({mobile});

      if(!checkUserPresent) {                                      //if user exist , then return a response
        return res.status(401).json({
            success:false,
            message:'User not present',
        })
    }
    }
    else if (!accountNumber) {
      checkUserPresent = await User.findOne({accountNumber});

      if(!checkUserPresent) {                                      //if user exist , then return a response
        return res.status(401).json({
            success:false,
            message:'User not present',
        })
      }
    }

    const money = req.body.money;
    if(user.amount < money) {
      return res.status(401).json({
        success:false,
        message:'Insufficient balance',
    })
    }
    
    console.log( "user ki ID", user._id);
    sendingUserMoney(user._id, checkUserPresent, money);
    return res.status(200).json({
      success: true,
      message: "Transaction Completed",
    });
  }
  catch(error) {
    console.log(error);
    return res.status(500).json({
      success: false,
      message: "Something went wrong while sending reset pwd mail",
    });
  }
};

export { registerUser, loginUser, getUserDetails, sendOTP, changePassword, sendMoney };
